<<<<<<< HEAD
-- 20220210
-- 계층형 질의와 셀프조인

CREATE TABLE EMPLOYEES( 
	EMP VARCHAR2(1),
	MGR VARCHAR2(1)
);

INSERT INTO EMPLOYEES (EMP, MGR) VALUES ('A',NULL);
INSERT INTO EMPLOYEES (EMP, MGR) VALUES ('B','A');
INSERT INTO EMPLOYEES (EMP, MGR) VALUES ('C','A');
INSERT INTO EMPLOYEES (EMP, MGR) VALUES ('D','C');
INSERT INTO EMPLOYEES (EMP, MGR) VALUES ('E','C');

SELECT * 
	FROM EMPLOYEES ;

-- 순차 진행
SELECT LEVEL, CONNECT_BY_ISLEAF ISLEAF , LPAD(' ', 10*(LEVEL-1)) || EMP 진행, e.*
	FROM EMPLOYEES e
	START WITH MGR IS NULL
	CONNECT BY PRIOR EMP = MGR
	ORDER BY 1;

-- 역차 진행
SELECT LEVEL, CONNECT_BY_ISLEAF, LPAD(' ', 10*(LEVEL-1)) || EMP, EMP
	FROM EMPLOYEES e 
	WHERE EMP = 'A'	  -- START WITH ~ CONNECT BY ~에 의해서 실행된 결과 중 조건을 판단 함
	START WITH EMP = 'D'
	CONNECT BY PRIOR MGR = EMP
--	WHERE EMP = 'A' --START WITH ~ CONNECT BY 뒤에는 무조건 ORDER BY만온다( 조건절이 위치 할 수 없다.)
	ORDER BY 1;

-- LEVEL : 구조의 DEPTH 나타냄 1부터
-- CONNECT_BY_ISLEAF : 자식이 없다면 1, 자식이 있다면 0
-- CONNECT_BT_ROOT(표현컬럼) : 현재에서 최상위의 ROOT를 찾아 줌 
-- SYS_CONNECT_BY_PATH(표현컬럼, 구분자(/ OR -)) : 자신의 위치부터 추적하여 전개를 표현해줌 

-- START WITH : 선택한 ROW의 컬럼
-- CONNECT BY : 전개 방식
-- PRIOR : 시작위치 

SELECT EMP, LEVEL,
	CONNECT_BY_ISLEAF 마지막노드,
	CONNECT_BY_ROOT EMP "최상위 사원",
	SYS_CONNECT_BY_PATH(EMP,'->') 전개
	FROM EMPLOYEES e
	START WITH MGR IS NULL
	CONNECT BY MGR = PRIOR EMP;

-- 순차 진행
SELECT LEVEL, CONNECT_BY_ISLEAF ISLEAF , LPAD(' ', 10*(LEVEL-1)) || EMPNO 진행
	,SYS_CONNECT_BY_PATH(EMPNO,'->') 전개
	FROM EMP e
	START WITH MGR IS NULL
	CONNECT BY PRIOR EMPNO = MGR
	ORDER BY 1;

-- 역차 진행
SELECT LEVEL, CONNECT_BY_ISLEAF, LPAD(' ', 10*(LEVEL-1)) || ENAME
	, 	SYS_CONNECT_BY_PATH(ENAME,'->') 전개
	FROM EMP e 
	START WITH EMPNO = '7934'
	CONNECT BY PRIOR MGR = EMPNO
	ORDER BY 1;

=======


CREATE TABLE EMPLOYEES(
	EMP VARCHAR2(1),
	MGR VARCHAR2(1)
);
DROP TABLE EMPLOYEES ;

INSERT INTO GD.EMPLOYEES (EMP, MGR) VALUES('A', NULL);
INSERT INTO GD.EMPLOYEES (EMP, MGR) VALUES('B', 'A');
INSERT INTO GD.EMPLOYEES (EMP, MGR) VALUES('C', 'A');
INSERT INTO GD.EMPLOYEES (EMP, MGR) VALUES('D', 'C');
INSERT INTO GD.EMPLOYEES (EMP, MGR) VALUES('E', 'C');

SELECT *
	FROM EMPLOYEES e ;

-- 순차진행
SELECT LEVEL, CONNECT_BY_ISLEAF, LPAD(' ', 10*(LEVEL-1)) || EMP 진행
	FROM EMPLOYEES e 
	START WITH MGR IS NULL
	CONNECT BY PRIOR EMP = MGR
	ORDER BY 1 ;

-- 역차 진행 D->C->A
SELECT LEVEL, CONNECT_BY_ISLEAF, LPAD(' ', 10*(LEVEL-1)) || EMP, EMP
	FROM EMPLOYEES e 
--	WHERE EMP = 'A'
--	WHERE EMP = 'A'-- START WITH CONNECT BY ~에 의해서 '실행된 결과 중' 조건을 판단 함
	START WITH EMP = 'D'
	CONNECT BY PRIOR MGR = EMP
--	WHERE EMP = 'A' -- START WITH ~ CONNECT BY 뒤에는 조건절이 위치 할 수 없다
	ORDER BY 1;
-- LEVEL : 구조의 DEPTH 나타냄 1부터
-- CONNECT BY_ISLEAF : 자식이 없다면 1, 자식이 있다면 0
-- CONNECT_BY_ROOT(표현 컬럼) : 현재에서 최상위의 ROOT을 찾아줌
-- SYS_CONNECT_BY_PATH(표현 컬럼, 구분자) : 자식의 위치부터 추적하여 전개를 표현해 줌

-- START WITH : 선택한 ROW 컬럼
-- CONNECT BY : 전개방식
-- PRIOR : 시작 위치

SELECT EMP,LEVEL , 
	CONNECT_BY_ISLEAF 마지막노드, 
	CONNECT_BY_ROOT EMP "최상위 사원",
	SYS_CONNECT_BY_PATH(EMP, '->') 전개
	FROM EMPLOYEES e 
	START WITH MGR IS NULL 
	CONNECT BY MGR = PRIOR EMP;

-- 실습 > EMP 
SELECT *
	FROM EMP e ;

SELECT LEVEL, EMPNO, ENAME, CONNECT_BY_ISLEAF "마지막 노드", 
	CONNECT_BY_ROOT EMPNO "최상위 노드", 
	SYS_CONNECT_BY_PATH(ENAME, '-'),  
	LPAD(' ', 10*(LEVEL-1)) || EMPNO 진행
	FROM EMP e 
	START WITH MGR IS NULL
	CONNECT BY PRIOR EMPNO = MGR
	ORDER BY 1 ;

SELECT  LEVEL, EMPNO, ENAME, CONNECT_BY_ISLEAF "마지막 노드", 
	CONNECT_BY_ROOT EMPNO "최상위 노드", 
	SYS_CONNECT_BY_PATH(ENAME, '-'),  
	LPAD(' ', 10*(LEVEL-1)) || EMPNO 진행
	FROM EMP e 
	START WITH EMPNO ='7369'
	CONNECT BY EMPNO = PRIOR MGR 
	ORDER BY 1 ;

SELECT  LEVEL, EMPNO, ENAME, CONNECT_BY_ISLEAF "마지막 노드", 
	CONNECT_BY_ROOT EMPNO "최상위 노드", 
	SYS_CONNECT_BY_PATH(ENAME, '-'),  
	LPAD(' ', 10*(LEVEL-1)) || EMPNO 진행
	FROM EMP e 
	START WITH EMPNO = '7934'
	CONNECT BY PRIOR MGR = EMPNO 
	ORDER BY 1 ;

-- 셀프조인
-- 바로 상위의 부모를 찾기 위한 방법
SELECT *
	FROM EMPLOYEES e1, EMPLOYEES e2  ; -- CATESIAN PRODUCT는 기준이 없기때문에 ROW단위로 JOIN을 수행한다

SELECT e1.EMP, e1.MGR, e2.EMP , e2.MGR 상위부모
	FROM EMPLOYEES e1, EMPLOYEES e2  
	WHERE e1.MGR = e2.EMP(+) 
	ORDER BY 1;
>>>>>>> 20899f9b6dfaa86e00c083368aae6950a8743899

